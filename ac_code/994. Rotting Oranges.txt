class Solution {
    int safeAccess(vector<vector<int>>& grid, int i, int j) {
        if (i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size()) return 0;
        return grid[i][j];
    }
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int, int>> q;
        for (int i = 0; i < grid.size(); i++) {
            for (int j = 0; j < grid[0].size(); j++) {
                if (grid[i][j] == 2) {
                    grid[i][j] = 0;
                    q.push(make_pair(i, j));
                } else if (grid[i][j] == 1) {
                    grid[i][j] = INT_MAX;
                }
            }
        }
        while (!q.empty()) {
            pair<int, int> pos = q.front();
            q.pop();
            int val = grid[pos.first][pos.second] + 1;
            if (safeAccess(grid, pos.first + 1, pos.second) > val) {
                grid[pos.first + 1][pos.second] = val;
                q.push(make_pair(pos.first + 1, pos.second));
            }
            if (safeAccess(grid, pos.first - 1, pos.second) > val) {
                grid[pos.first - 1][pos.second] = val;
                q.push(make_pair(pos.first - 1, pos.second));
            }
            if (safeAccess(grid, pos.first, pos.second + 1) > val) {
                grid[pos.first][pos.second + 1] = val;
                q.push(make_pair(pos.first, pos.second + 1));
            }
            if (safeAccess(grid, pos.first, pos.second - 1) > val) {
                grid[pos.first][pos.second - 1] = val;
                q.push(make_pair(pos.first, pos.second - 1));
            }
        }
        int result = 0;
        for (int i = 0; i < grid.size(); i++) {
            for (int j = 0; j < grid[0].size(); j++) {
                result = max(grid[i][j], result);
            }
        }
        return result == INT_MAX ? -1 : result;
    }
}; 